#!/bin/bash

### Helper functions to load/install files/plugins ###
# stolen from https://github.com/gomfol12/dotfiles
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}


function brightness() {
	var=$2

	if (($(echo "$2>1" |bc -l) )); then	
	
		if (($(echo "$2<10" |bc -l) )); then	
				
			var=$(bc  <<< "scale=2;$var*10")
		fi
		var=$(bc  <<< "scale=2;$var/100")
	
	fi
	
	xrandr --output $1 --brightness $var
}
function md() {
	mkdir -pv $1 && cd $1
}

function old() {
    mv $1 $1.old
}

function myssh() {
	scp ~/.config/bash/aliases-remoteable $1:/tmp/.bashrc_temp
	scp ~/.config/bash/functions $1:/tmp/.bashfunctions_tmp
	ssh -t $1 "bash --rcfile <(echo . /etc/profile ; echo . '\$HOME/.bashrc'; cat /tmp/.bashrc_temp /tmp/.bashfunctions_tmp;) ; rm /tmp/.bashrc_temp ; rm /tmp/.bashfunctions_tmp"
}


#nnn with cd
n ()
{
    # Block nesting of nnn in subshells
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The backslash allows one to alias n to nnn if desired without making an
    # infinitely recursive alias
    \nnn "$@" -d -e -H -r

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}


function x () {
	set -f

if [ "$1" = "-nl" ]; then
    SAVEIFS=$IFS
    IFS=$(printf "\n\b")
    shift
fi

# idk why shellcheck is complaining here. With quotes it don't work
for file in $@; do
    case "$file" in
    *.zip) unzip "$file" ;;
    *.xapk) unzip "$file" ;;
    *.apk) unzip "$file" ;;
    *.pkpass) unzip "$file" ;;
    *.xz) unxz "$file" ;;
    *.tar.gz) tar xzvf "$file" ;;
    *.tar.bz2) tar xjvf "$file" ;;
    *.tar.xz) tar xJvf "$file" ;;
    *.tar.lzma) tar -x --lzma -f "$file" ;;
    *.tar) tar xvf "$file" ;;
    *.gz) gunzip "$file" ;;
    *.bz2) bunzip2 "$file" ;;
    *.rar) unrar x "$file" ;;
    *.tbz2) tar xjvf "$file" ;;
    *.tgz) tar xzvf "$file" ;;
    *.Z) uncompress "$file" ;;
    *.7z) 7z x "$file" ;;
    *.tzst) unzstd "$file" ;;
    *) printf "File: %s: Unsupported format\n" "$file" ;;
    esac
done

if [ "$1" = "-nl" ]; then
    IFS=$SAVEIFS
fi
}

function palias(){
	echo "alias $1='$2'" >> ~/.config/bash/aliases && source ~/.config/bash/aliases;
}

function dot() {
		config -C $HOME ls-tree -r master --name-only | fzf --preview "highlight -i $HOME/{1} --stdout --out-format=ansi -q --force"| sed "s@^@$HOME/@" | xargs -ro "$EDITOR"
}

function sw() {
	kanshi
	setxkbmap de &
	clipmanager &
	sxhkd &
	udiskie --tray &
	numlockx &
	nitrogen --restore &
	qtile start -b wayland

}
# re-wrote the script above
#bind '"\C-r": "\C-x1\e^\er"'
#bind -x '"\C-x1": __fzf_history';


uploadfile() {
  if [ -z "$1" ]; then
    echo "Usage: uploadfile <file>"
    return 1
  fi

  if [ ! -f "$1" ]; then
    echo "File not found: $1"
    return 1
  fi

  response=$(curl -F "file=@$1" https://0x0.st)
  if [ $? -eq 0 ]; then
    echo "File uploaded successfully: $response"
  else
    echo "Failed to upload file"
  fi
}



__fzf_history () {
				__ehc $(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

__ehc() {
				if [[ -n $1 ]]
				then
								bind '"\er": redraw-current-line'
								bind '"\e^": magic-space'
								READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
								READLINE_POINT=$(( READLINE_POINT + ${#1} ))
				else
								bind '"\er":'
								bind '"\e^":'
				fi
}



function c() {
				#newPath=$(exa -lhaa --color always | fzf --multi --ansi --preview "exa -lha {7..}" | awk '{ s = ""; for (i = 7; i <= NF; i++) s = s $i " "; print s }' )
				#if [ ! -z "$newPath" ]
				#then
				#				cd "$newPath"
				#				c
				#fi
				echo ""

}

fd() {
  git="/usr/bin/git --git-dir=/home/silas/.cfg/ --work-tree=/home/silas"
  git="git"
  preview="$git diff $@ --color=always -- {-1}";
  previewStaged="$git diff $@ --color=always --staged -- {-1}";
	diffCommand="$git diff $@ --name-only"; 
	diffCommandStaged="$diffCommand --staged";
	echo $diffCommand $diffCommandStaged;
	$diffCommand | fzf -m --ansi --preview "$preview" -m --bind "ctrl-a:execute-silent($git add {})+reload($diffCommand),ctrl-s:reload($diffCommandStaged)+change-preview($previewStaged)+unbind(ctrl-a)";
}

# global vars for parfin, parfs, parfdel, ...
if command -v flatpak 2>&1 >/dev/null; then
    parf_flatpak_repos=()
    parf_per_user=()
    parf_cache_dir="/tmp/pacall_cache"
    \mkdir -p "$parf_cache_dir" || return 1

    parf_flatpak_repos=($(flatpak --user remotes | awk '{print $1}'))

    if [ -z "$parf_flatpak_repos" ]; then
        parf_flatpak_repos=($(flatpak --system remotes | awk '{print $1}'))
        parf_per_user=0
    else
        parf_per_user=1
    fi
fi

parf_fzf_preview()
{
    local package="${*//\*/}"
    local repo=""

    # find longest matching repo name
    for r in "${parf_flatpak_repos[@]}"; do
        if [[ "$package" == *"-$r" && ${#r} -gt ${#repo} ]]; then
            repo="$r"
        fi
    done

    if [[ -n "$repo" ]]; then
        package="${package%-"$repo"}"
        package="${package##*\(}" # remove everything before last (
        package="${package%%\)*}" # remove everything after last )

        if [[ "$parf_per_user" -eq 1 ]]; then
            flatpak --user remote-info "$repo" "$package" | tail -n +2
        else
            flatpak --system remote-info "$repo" "$package" | tail -n +2
        fi
    else
        paru -Si "$package"
    fi
}

parfs()
{
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    {
        paru -Sl | awk '{s=$2; gsub(/\x1b\[[0-9;]*m/, "", s); print s ($4 == "" ? "" : "*")}'
        for repo in "${parf_flatpak_repos[@]}"; do
            local cache_file="$parf_cache_dir/$repo.cache"
            if [[ ! -f "$cache_file" || $(find "$cache_file" -mmin +60) ]]; then
                local flatpak_packages=""
                local flatpak_packages_installed=""
                if [ "$parf_per_user" -eq 1 ]; then
                    flatpak_packages=$(flatpak --user remote-ls --app --columns=name,application "$repo")
                    flatpak_packages_installed=$(flatpak --user list --app --columns=name,application)
                else
                    flatpak_packages=$(flatpak --system remote-ls --app --columns=name,application "$repo")
                    flatpak_packages_installed=$(flatpak --system list --app --columns=name,application)
                fi
                awk -F'\t' -v r="$repo" '
                NR==FNR { lookup[$2] = 1; next }
                { printf "%s(%s)-%s%s\n", $1, $2, r, ($2 in lookup ? "*" : "")}
                ' <(echo "$flatpak_packages_installed") <(echo "$flatpak_packages") >"$cache_file"
            fi
            cat "$cache_file"
        done
    } | fzf --multi --preview '
            '"$(declare -p parf_flatpak_repos)"'
            '"$(declare -f parf_fzf_preview)"'
            '"$(declare -p parf_per_user)"'
            parf_fzf_preview {}
    ' | tr -d "*"
}

pi(){
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    local packages=$(parfs)

    if [ -z "$packages" ]; then
        return
    fi

    local pacman_packages=()
    local flatpak_packages=()

    # Sort packages
    while read -r package; do
        local matched_repo=""
        local matched_package=""
        for repo in "${parf_flatpak_repos[@]}"; do
            if [[ "$package" == *"-$repo" && "${#repo}" -gt "${#matched_repo}" ]]; then
                matched_repo="$repo"
                matched_package="${package%-"$repo"}"
                matched_package="${matched_package##*\(}" # remove everything before last (
                matched_package="${matched_package%%\)*}" # remove everything after last )
            fi
        done
        if [[ -n "$matched_repo" ]]; then
            flatpak_packages+=("$matched_repo $matched_package")
        else
            pacman_packages+=("$package")
        fi
    done <<<"$packages"

    # Install flatpak packages
    for repo in "${parf_flatpak_repos[@]}"; do
        local to_install=()
        for entry in "${flatpak_packages[@]}"; do
            if [[ "$repo" == "${entry%% *}" ]]; then
                to_install+=("${entry#* }")
            fi
        done
        if [[ ${#to_install[@]} -gt 0 ]]; then
            echo "Flatpak: Installing from $repo"
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak --user install "$repo" "${to_install[@]}"
            else
                flatpak --system install "$repo" "${to_install[@]}"
            fi

            if [ "$?" -eq 0 ]; then
                \rm -rf "$parf_cache_dir/$repo.cache"
            fi
        fi
    done

    # Install pacman packages
    if [[ ${#pacman_packages[@]} -gt 0 ]]; then
        echo "Pacman: Installing"
        paru "$@" -S "${pacman_packages[@]}"
    fi
}

function pi_old()
{
    paru -Sl --color "never" | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*" | xargs -ro paru -S
}
function pd_old()
{
    paru -Qq | fzf --multi --preview 'paru -Qi {1}' | xargs -ro paru -Rncs
}

function pd()
{
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    local packages="$(
        {
            pacman -Qq
            local flatpak_packages=""
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak_packages=$(flatpak --user list --app --columns=name,application,origin)
            else
                flatpak_packages=$(flatpak --system list --app --columns=name,application,origin)
            fi
            awk -F'\t' '{printf "%s(%s)-%s\n", $1, $2, $3}' <(echo "$flatpak_packages")
        } | fzf --multi --preview '
            '"$(declare -p parf_flatpak_repos)"'
            '"$(declare -f parf_fzf_preview)"'
            '"$(declare -p parf_per_user)"'
            parf_fzf_preview {}
    ' | tr -d "*"
    )"

    if [ -z "$packages" ]; then
        return
    fi

    local pacman_packages=()
    local flatpak_packages=()

    # Sort packages
    while read -r package; do
        local matched_repo=""
        local matched_package=""
        for repo in "${parf_flatpak_repos[@]}"; do
            if [[ "$package" == *"-$repo" && "${#repo}" -gt "${#matched_repo}" ]]; then
                matched_repo="$repo"
                matched_package="${package%-"$repo"}"
                matched_package="${matched_package##*\(}" # remove everything before last (
                matched_package="${matched_package%%\)*}" # remove everything after last )
            fi
        done
        if [[ -n "$matched_repo" ]]; then
            flatpak_packages+=("$matched_repo $matched_package")
        else
            pacman_packages+=("$package")
        fi
    done <<<"$packages"

    for repo in "${parf_flatpak_repos[@]}"; do
        local to_uninstall=()
        for entry in "${flatpak_packages[@]}"; do
            if [[ "$repo" == "${entry%% *}" ]]; then
                to_uninstall+=("${entry#* }")
            fi
        done
        if [[ ${#to_uninstall[@]} -gt 0 ]]; then
            echo "Flatpak: Uninstalling from $repo"
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak --user uninstall "${to_uninstall[@]}"
            else
                flatpak --system uninstall "${to_uninstall[@]}"
            fi

            if [ "$?" -eq 0 ]; then
                \rm -rf "$parf_cache_dir/$repo.cache"
            fi
        fi
    done

    if [[ ${#pacman_packages[@]} -gt 0 ]]; then
        echo "Pacman: Uninstalling"
        paru --fm lf.sh -Rns "${pacman_packages[@]}"
    fi
}

function fkill()
{
    ps auxh | fzf -m --reverse --tac --bind='ctrl-r:reload(ps auxh)' --header=$'Press CTRL-R to reload\n' | awk '{print $2}' | xargs -r kill -"${1:-9}"
}

function torWithExit() {
				local new_code="$1"
				local file_path="/home/silas/.local/share/torbrowser/tbb/x86_64/tor-browser/Browser/TorBrowser/Data/Tor/torrc"
				sed -i 's/\(ExitNodes {\)[^}]*\(}\)/\1'"$new_code"'\2/' "$file_path"
				torbrowser-launcher
}

function conda_setup() {

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/etc/profile.d/conda.sh" ]; then
        . "/usr/etc/profile.d/conda.sh"
    else
        export PATH="/usr/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
}
