#!/bin/bash
function brightness() {
	var=$2

	if (($(echo "$2>1" |bc -l) )); then	
	
		if (($(echo "$2<10" |bc -l) )); then	
				
			var=$(bc  <<< "scale=2;$var*10")
		fi
		var=$(bc  <<< "scale=2;$var/100")
	
	fi
	
	xrandr --output $1 --brightness $var
}
function md() {
	mkdir -pv $1 && cd $1
}

function myssh() {
	scp ~/.config/bash/aliases-remoteable $1:/tmp/.bashrc_temp
	scp ~/.config/bash/functions $1:/tmp/.bashfunctions_tmp
	ssh -t $1 "bash --rcfile <(echo . /etc/profile ; echo . '\$HOME/.bashrc'; cat /tmp/.bashrc_temp /tmp/.bashfunctions_tmp;) ; rm /tmp/.bashrc_temp ; rm /tmp/.bashfunctions_tmp"
}


#nnn with cd
n ()
{
    # Block nesting of nnn in subshells
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The backslash allows one to alias n to nnn if desired without making an
    # infinitely recursive alias
    \nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}


function x () {
	set -f

if [ "$1" = "-nl" ]; then
    SAVEIFS=$IFS
    IFS=$(printf "\n\b")
    shift
fi

# idk why shellcheck is complaining here. With quotes it don't work
for file in $@; do
    case "$file" in
    *.zip) unzip "$file" ;;
    *.tar.gz) tar xzvf "$file" ;;
    *.tar.bz2) tar xjvf "$file" ;;
    *.tar.xz) tar xJvf "$file" ;;
    *.tar.lzma) tar -x --lzma -f "$file" ;;
    *.tar) tar xvf "$file" ;;
    *.gz) gunzip "$file" ;;
    *.bz2) bunzip2 "$file" ;;
    *.rar) unrar x "$file" ;;
    *.tbz2) tar xjvf "$file" ;;
    *.tgz) tar xzvf "$file" ;;
    *.Z) uncompress "$file" ;;
    *.7z) 7z x "$file" ;;
    *) printf "File: %s: Unsupported format\n" "$file" ;;
    esac
done

if [ "$1" = "-nl" ]; then
    IFS=$SAVEIFS
fi
}

function palias(){
	echo "alias $1='$2'" >> ~/.config/bash/aliases && source ~/.config/bash/aliases;
}

function dot() {
		config -C $HOME ls-tree -r master --name-only | fzf --preview "highlight -i $HOME/{1} --stdout --out-format=ansi -q --force"| sed "s@^@$HOME/@" | xargs -ro "$EDITOR"
}

function sw() {
	kanshi
	setxkbmap de &
	clipmanager &
	sxhkd &
	udiskie --tray &
	numlockx &
	nitrogen --restore &
	qtile start -b wayland

}
# re-wrote the script above
bind '"\C-r": "\C-x1\e^\er"'
bind -x '"\C-x1": __fzf_history';

__fzf_history () {
				__ehc $(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

__ehc() {
				if [[ -n $1 ]]
				then
								bind '"\er": redraw-current-line'
								bind '"\e^": magic-space'
								READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
								READLINE_POINT=$(( READLINE_POINT + ${#1} ))
				else
								bind '"\er":'
								bind '"\e^":'
				fi
}



function c() {
				newPath=$(exa -lhaa --color always | fzf --multi --ansi --preview "exa -lha {7..}" | awk '{ s = ""; for (i = 7; i <= NF; i++) s = s $i " "; print s }' )
				if [ ! -z "$newPath" ]
				then
								cd "$newPath"
								c
				fi	
}

function pi()
{
    paru -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*" | xargs -ro paru -S
}
function pd()
{
    paru -Qq | fzf --multi --preview 'paru -Qi {1}' | xargs -ro paru -Rncs
}
